#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" script to find all unique reactions in the DB

"""

import pylmps
import molsys
import sys
import os
import numpy as np
from molsys.util import RDB

if len(sys.argv) < 2:
    print ("usage:  find_unique_reactions <db_path> <pdlp_file> <stage>")
    exit()
    
#
# Read command line arguments
#
db_path   = sys.argv[1]
pdlp_path = sys.argv[2]
pdlp_path = os.path.abspath(pdlp_path)
stage     = sys.argv[3]

print ("open database %s" % db_path)
rdb = RDB.RDB(db_path)
print ("dealing with MD from file %s and stage %s"  % (pdlp_path, stage))

db = rdb.db
md = db((db.md.path == pdlp_path) & (db.md.stage == stage)).select().first()
revents = db((db.revent.mdID == md)).select()

unique_reactions = []

num_non_unique = 0
num_unique = 0

num_all = (len(revents))
count = 0

for r in revents:

    count += 1
    print( str(count) + " of " + str(num_all))

    # the first unique reaction is simple
    if len(unique_reactions) == 0:
        unique_reactions.append(r)
        continue

    is_unique  = True
    same_ts    = False
    same_pr    = False
    same_ed    = False
    same_pr_ed = False
    same_ed_pr = False

    # get all md_species for this event
    mdspec = db((db.md_species.reventID == r)).select()
    if len(mdspec) > 0:
        print ("Compare MD species" )
        for m in mdspec:
            # get mol object from DB
            fname, mfpxf = db.md_species.mfpx.retrieve(m.mfpx)
            mfpxs = mfpxf.read().decode('utf-8')
            mfpxf.close()
            mol = molsys.mol.from_string(mfpxs)
            print ("This is species %s" % fname)

            have_ts = (m.foffset == 0 )
            have_ed = (m.foffset == -1)
            have_pr = (m.foffset == 1 )
            
            mol.addon("graph")
            mol.graph.make_graph()

            #
            # compare with elements in unique_reaction list
            #

            for ur in unique_reactions:
                ur_mdspec = db((db.md_species.reventID == ur)).select()

                for ur_m in ur_mdspec:
                    fname, mfpxf = db.md_species.mfpx.retrieve(ur_m.mfpx)
                    mfpxs = mfpxf.read().decode('utf-8')
                    mfpxf.close()
                    ur_mol = molsys.mol.from_string(mfpxs)

                    ur_mol.addon("graph")
                    ur_mol.graph.make_graph()

                    is_same = molsys.addon.graph.is_equal(mol.graph.molg, ur_mol.graph.molg)

                    if is_same == False:
                        continue

                    same_ts = (have_ts and ur_m.foffset ==  0)
                    same_ed = (have_ed and ur_m.foffset == -1)
                    same_pr = (have_pr and ur_m.foffset ==  1)

                    same_pr_ed = (have_ed and ur_m.foffset ==  1)
                    same_ed_pr = (have_pr and ur_m.foffset == -1)


    # many boolean operations, which are probably not fast in python
    same_reaction = (same_ts and same_pr and same_ed) 
    back_reaction = (same_ts and same_pr_ed and same_ed_pr)

    is_unique = not (same_reaction or back_reaction)


    num_non_unique += 1

    if is_unique:
        unique_reactions.append(r)
        num_unique += 1

    print( str(num_unique) + "  unique reactions ")

num_non_unique -= num_unique


print("Num unique : " + str(num_unique)) 
print("Num non unique : " + str(num_non_unique)) 
