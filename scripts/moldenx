#!/bin/bash
###QUICKTRY: moldenx structure.mfpx
###########################################################
#
#   molden mfpx structures v0.9
#   visualize MOF+ structure files via molden
#
#   by Roberto Amabile (2016)
#   basic assumption: mfpx file is a txyz file but
#     the 6th and 7th columns and
#       the comments (lines CONTAINING sharps)
#   TBI: "splitting" inline comments away
#
#   PRE-ALPHA VERSION: USE AT YOUR OWN RISK
#       NO WARRANTY, NO LIABILITY
#   The author will use best judgement and
#       reasonable effort to keep the code
#       clear and tidy
#   NOT YET LICENSED
#
#   Speechless...
#   http://www.etymologiebank.nl/trefwoord/mof1
#  
###########################################################
### USE
###     moldenx structure.mfpx ### works as a tinker xyz
### it works as tinker xyz file
###
### with any different extension:
###     moldenx structure.txyz 
### it works as usual
DEBUG="False" ### "True" for debugging info
### AUXILIARY FUNCTIONS ###################################
_logecho () {
    ###echo to stderr, for debugging
    if [ $DEBUG == "True" ]; then echo "$1" 1>&2 ; fi
}
### TEMPORARY-CARING FUNCTIONS ############################
_tmpfold () {
    if [ -z $TEMP_FOLD ]; then
        if [ -d "$1" ]; then
            if [ -x "$1" ]; then
                TEMP_FOLD=$1
                PRE_TEMP="True"
            fi
        else
            # create if temporary folder does not exist
            mkdir "$1"
            if [ -x "$1" ]; then
                TEMP_FOLD="$1"
                PRE_TEMP="False"
            else
                rm -r "$1"
            fi
        fi
    fi
}
_tmpfile () {
    ###set temporary file if not previously set
    if [ -z $TEMP_FILE ]; then    
        TEMP_FILE=$TEMP_FOLD/molden.pid$$.$RANDOM
    fi
}
_tmpcheck () {
    ###check if variable is set and print message
    if [ -z "$1" ]; then
        _logecho "$1 is unset"
    else
        if [ -z "$2" ]; then
            _logecho "$1 is set to ${!1}"
        elif [ "${!2}" == "True" ]; then
            _logecho "$1 is set to ${!1}" and pre-existed
        elif [ "${!2}" == "False" ]; then
            _logecho "$1 is set to ${!1}" and did not pre-exist
        else
            _logecho "CRITICAL ERROR: $2 must be \"True\" or \"False\", not: \"${!2}\" "
            exit 1
        fi
    fi
}
_tmpclean () {
    ###exit housekeeping
    echo -ne '\033[0K\r' ###gracious prompt sweeping
    ###remove temporary file
    if [ -e "$TEMP_FILE" ]; then
        _logecho "Removing temporary file $TEMP_FILE"
        rm $TEMP_FILE
    fi
    ###remove temporary folder if not pre-existing
    if [ -d "$TEMP_FOLD" ]; then
        if [ $PRE_TEMP == "False" ]; then
            _logecho "Removing temporary folder $TEMP_FOLD"
            rm -r $TEMP_FOLD
        fi
    fi
}
###clean-up in any case but SIGKILL (e.g. 'kill -9 $pid')
trap _tmpclean SIGHUP SIGINT SIGTERM
###TEMPORARY SETS AND CHECKS
_tmpfold /tmp
###if /tmp is not accessible
_tmpfold ~/.tmp
###if ~/.tmp is either unavailable or unaccessible
_tmpfold $PWD/.tmp
###you are safe if EVEN .tmp is not available!
_tmpcheck TEMP_FOLD PRE_TEMP
_tmpfile
_tmpcheck TEMP_FILE
###PROGRAM HERE###
if [ ${1: -5} = ".mfpx" ]; then
    ### if the extension is ".mfpx":
    ###     remove the comments, "erase" 6th and 7th columns
    ###     and redirect to temporary file
    ###     if everything is fine: molden the temporary file
    grep -v \# $1 | awk '{$6=""; $7=""; print}' > $TEMP_FILE && molden $TEMP_FILE
else
    ### standard molden
    molden $1
fi
###CLEAN-UP OF TEMPORARY FILES AND FOLDERS###
_tmpclean