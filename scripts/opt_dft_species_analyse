#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import sys
import molsys
import json
import numpy as np
import matplotlib.pyplot as plt
from molsys.util import RDB
from molsys.util import turbomole


# input
if len(sys.argv) < 2:
    print ("usage:  add_dft_species_add_to_RDB <db_path> <dft_path>")
    exit()

test = True

db_path   = os.path.abspath(sys.argv[1])
dft_path  = os.path.abspath(sys.argv[2])
rdb = RDB.RDB(db_path)
db = rdb.db
 

dft_subdir_paths = []
for path in os.listdir(dft_path):
   dft_subdir_path = os.path.join(dft_path, path)
   if os.path.isdir(dft_subdir_path):
       dft_subdir_paths.append(dft_subdir_path)


MS  = 0
NF  = 0
MF  = 0
SCF_spec = 0
SCF_woelf = 0
MGC = 0
GF_TS_woelf = 0
GF_TS_pre = 0
GF_TS = 0
EP  = 0
CF = 0
FC  = 0
FNC = 0
B   = 0
for dft_subdir_path in dft_subdir_paths:
    f_json = os.path.join(dft_subdir_path,'r.json')
    f_out = os.path.join(dft_subdir_path,'submit.out')
    if os.path.isfile(f_out):
        f = open(f_out,'r').read()
        if 'The optimised structure has more than a single molecule' in f: MS += 1
        if 'No imaginary frequency at the start structure' in f: NF += 1
        if 'There are more than one imaginary frequencies at the start structure' in f: MF += 1
        if 'The SCF calculation with Fermi smearing did not converge also with start damping 2.0' in f: SCF_spec += 1
        if 'The SCF did not converge in one of the structures' in f: SCF_woelf += 1
        if 'The TS guess from woelfling calculation did not converge' in f: GF_TS_woelf += 1
        if 'The TS pre-optimization did not converge' in f: GF_TS_pre += 1
        if 'The transition state optimization did not converge' in f: GF_TS += 1
        if 'The graph still changes with the multiplicity' in f: MGC += 1
        if 'The educt and the product is the same' in f: EP += 1
        if 'is not isomorphic to the graph of the fragment of' in f: CF += 1
    if os.path.isfile(f_json):
         with open(f_json) as f:
             data = json.load(f)
             for rxn in data:
                 r  = data[rxn]['reaction']
                 print(r['origin'])
                 if r['barrierless']: B += 1
                 if r['change']: 
                     FC += 1
                 else:
                     FNC += 1


GF = GF_TS_pre + GF_TS_woelf
SCF = SCF_spec + SCF_woelf

fig, ax = plt.subplots(figsize=(9, 3), subplot_kw=dict(aspect="equal"))

recipe = ["%d more than a single molecule" %MS,
          "%d no im freq at the start structure" %NF,
          "%d more than one im freq at the start structure" %MF,
          "%d scf convergence problem" %SCF,
          "%d geometry did not converge" %GF,
          "%d educt and the product is the same" %EP,
          "%d eq spec without the change of graph is not found" %MGC,
          "%d complex could not be generated" %CF,
          "%d barrierless" %B,
          "%d found, reaction graph changed" %FC,
          "%d found, reaction graph did not change" %FNC]



data = [MS, NF, MF, SCF, GF, EP, MGC, CF, B, FC, FNC]


wedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)

bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0)
kw = dict(arrowprops=dict(arrowstyle="-"),
          bbox=bbox_props, zorder=0, va="center")

for i, p in enumerate(wedges):
    ang = (p.theta2 - p.theta1)/2. + p.theta1
    y = np.sin(np.deg2rad(ang))
    x = np.cos(np.deg2rad(ang))
    horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
    connectionstyle = "angle,angleA=0,angleB={}".format(ang)
    kw["arrowprops"].update({"connectionstyle": connectionstyle})
    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),
                horizontalalignment=horizontalalignment, **kw)

fname = os.path.join(dft_path,'statistics.png')
plt.savefig(fname)
