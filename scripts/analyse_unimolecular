#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""test script to optimize all systems in the DB

all systems with zero energy and not TS are picked and optimized
"""

import pylmps
import molsys
import sys
import os
import time
import numpy as np
import ast
from molsys.util import RDB

#
# Helper functions
#
def get_mol_from_opt_spec(ospec):
    # get mol object from DB
	    fname, mfpxf = db.opt_species.mfpx.retrieve(ospec.mfpx)
	    mfpxs = mfpxf.read().decode('utf-8')
	    mfpxf.close()
	    mol = molsys.mol.from_string(mfpxs)
	    mol.addon("graph")
	    mol.detect_conn(thresh=0.001)
	    mol.graph.make_graph()
	    return mol

def get_opt_spec_path(ospec):
    fname, mfpxf = db.opt_species.mfpx.retrieve(ospec.mfpx)
    ospec_mfpxf_path = mfpxf.name
    mfpxf.close()
    return ospec_mfpxf_path

def get_md_spec_mfpx(md_spec):
    fname, mfpxf = db.md_species.mfpx.retrieve(md_spec.mfpx)
    md_spec_mfpxf_path = mfpxf.name
    mfpxf.close()
    return md_spec_mfpxf_path

def get_ncurjobs(jobids):
    squeueout = os.popen('squeue --format="%A"').read()
    squeuelist=squeueout.split()
    curjobids=set(jobids).intersection(squeuelist)
    ncurjobs = len(curjobids)
    return ncurjobs, curjobids



######################################################################################################################
######################################################################################################################
#
# Start of main program 
#
if len(sys.argv) < 5:
    print ("usage:  analyse_unimolecular <db_path> <pdlp_file> <stage> <lot>")
    exit()
    

db_path   = sys.argv[1]
pdlp_path = sys.argv[2]
pdlp_path = os.path.abspath(pdlp_path)
stage     = sys.argv[3]
lot = sys.argv[4]

print ("open database %s" % db_path)
rdb = RDB.RDB(db_path)
print ("dealing with MD from file %s and stage %s"  % (pdlp_path, stage))

# get all entries in md_species not TS (access pydal  directly TBI: some clever routines in rdb to handle this)
db = rdb.db
md = db((db.md.path == pdlp_path) & (db.md.stage == stage)).select().first()

reactions = db(db.reactions).select() 

lotID = rdb.get_lot(lot)

spec =  db(db.species).select()
n_spec = len(spec)
n_ts = len(reactions)-1
n_eq = n_spec - n_ts

n_uni = 0
n_uni_same = 0
 
# Loop over the reactions
print('The list of the unimolecular reaction with the same educt and product at LOT %s.' %lot)
if lot == "ReaxFF":
    print('  Reaction             Frame           ReactionID')
else:
    print('     Reaction       Reaction.origin       ')
print('---------------------------------------')
for r in reactions:
    if r.id != 1:
        # get all species for this reaction
        if lot == "ReaxFF":
            revent = db(db.revent.reactionsID == r.id).select().first()
        reac2ts_spec = db((db.reac2spec.reactionsID == r) & (db.reac2spec.label ==  0)).select().first()
        reac2educt_spec = db((db.reac2spec.reactionsID == r) & (db.reac2spec.label == -1)).select()
        reac2proc_spec  = db((db.reac2spec.reactionsID == r) & (db.reac2spec.label ==  1)).select()
        
        
        n_ed = len(reac2educt_spec)
        n_prod = len(reac2proc_spec)
        if n_ed == 1 and n_prod == 1:
            unimolecular = True
        else:
            unimolecular = False
        
        
        educts = ''
        for i,ed in enumerate(reac2educt_spec):
            if i+1 != n_ed:
                educts += '%s+' %ed.speciesID
            else:
                educts += '%s' %ed.speciesID
            if unimolecular:
                oed_ref = db((db.opt_species.speciesID == ed.speciesID) & (db.opt_species.lotID == lotID)).select().first()
                if oed_ref != None:
                    mol_ed_ref = get_mol_from_opt_spec(oed_ref)
        
        products = ''
        for i,prod in enumerate(reac2proc_spec):
            if i+1 != n_prod:
                products += '%s+' %prod.speciesID
            else:
                products += '%s' %prod.speciesID
            if unimolecular:
                oprod_ref = db((db.opt_species.speciesID == prod.speciesID) & (db.opt_species.lotID == lotID)).select().first()
                if oprod_ref != None:
                    mol_prod_ref = get_mol_from_opt_spec(oprod_ref)
        
        if unimolecular:
            if oed_ref != None and oprod_ref != None:
                n_uni += 1
                reaction = '%s-(%s)->%s' %(educts,reac2ts_spec.speciesID,products)
                if reac2ts_spec == None:
                    reaction = '%s-(%s)->%s' %(educts,"barrierless",products)
                else:
                    reaction = '%s-(%s)->%s' %(educts,reac2ts_spec.speciesID,products)
        
                uni_equal = molsys.addon.graph.is_equal(mol_ed_ref.graph.molg, mol_prod_ref.graph.molg)
                if uni_equal[0]:
                     n_uni_same += 1
                     if lot == "ReaxFF":
                         print('%15s  %10d %10d' %(reaction,revent.frame, r.id))
                     else:print('%15s %10d' %(reaction, r.origin))

print(n_uni_same, n_uni)
print('For %d percent of the unimolecular reactions, the educt and product has the same molecular graph...' %(n_uni_same/n_uni*100))
